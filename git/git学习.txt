###通过git init命令把这个目录变成Git可以管理的仓库
###使用命令git add <file>，注意，可反复多次使用，添加多个文件；
###使用命令git add --all添加全部修改的
###使用命令 git status 查看分支状态
###使用命令git commit -m <message>，完成。


###穿梭前，用git log可以查看提交历史，以便确定要回退到哪个版本。
###要重返未来，用git reflog查看命令历史[commit_id]，以便确定要回到未来的哪个版本。
###要关联一个远程库，使用命令git remote add origin git@server-name:path/repo-name.git；
###HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令git reset --hard commit_id。

###关联后，使用命令git push [-u] origin master第一次推送master分支的所有内容；

###提交后，用git diff HEAD -- readme.txt命令可以查看工作区和版本库里面最新版本的区别

###git checkout -- file可以丢弃工作区的修改 让这个文件回到最近一次git commit或git add时的状态。

###用命令git reset HEAD <file>可以把暂存区的修改撤销掉（unstage），重新放回工作区

创建dev分支，然后切换到dev分支 git checkout -b dev

用git branch命令查看当前分支：

我们把dev分支的工作成果合并到master[是当前分支]分支上: git merge dev 

查看分支：git branch

创建分支：git branch <name>

切换分支：git checkout <name>

创建+切换分支：git checkout -b <name>

合并某分支到当前分支：git merge <name>

删除分支：git branch -d <name>